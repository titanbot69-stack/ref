    """Stage-based workflow for Grant / Revoke access requests.

    Grant flow: CTO_APPROVAL -> CISO_APPROVAL -> Application Owner -> Closed
    Revoke flow: CTO_APPROVAL -> Application Owner -> Closed
    Reject at any stage: eve_status = Rejected, assigned_to = rejecting actor's email.
    """

            cursor.execute(
                """
                SELECT event_id, event_description, assigned_to, COALESCE(eve_status,'open') AS eve_status
                FROM event_status
                WHERE event_id = %s
                FOR UPDATE
                """,
                [event_id]
            )
            row = cursor.fetchone()
            if not row:
                return JsonResponse({'success': False, 'error': 'Event not found'}, status=404)
            _event_id, event_description, current_assigned_to, current_eve_status = row

            if current_eve_status.lower() != 'open':
                return JsonResponse({'success': False, 'error': 'Event already closed'}, status=409)

            # Determine caller roles
            user_email = (request.user.email or '').lower()
            hrms_rows = get_hrms_list()
            hrms_row = next((r for r in hrms_rows if (r.get('business_email') or '').lower() == user_email), None)
            external_designation = (hrms_row or {}).get('external_designation', '')
            app_owner_emails = {o['email_id'].lower() for o in application_owners}

            def deny(msg='Not authorized for this stage'):
                return JsonResponse({'success': False, 'error': msg}, status=403)

            # Stage authorization
            if current_assigned_to == 'CTO_APPROVAL' and external_designation != 'Chief Technology Officer':
                return deny()
            if current_assigned_to == 'CISO_APPROVAL' and external_designation != 'Chief Information Security Officer':
                return deny()
            if current_assigned_to == 'Application Owner' and user_email not in app_owner_emails:
                return deny()

            is_grant = 'Grant Access Request' in (event_description or '')
            is_revoke = 'Revoke Access Request' in (event_description or '')
            if not (is_grant or is_revoke):
                return JsonResponse({'success': False, 'error': 'Unrecognized request type'}, status=400)

            next_assigned_to = current_assigned_to
            new_status = current_eve_status
            final = False

            if action == 'reject':
                new_status = 'Rejected'
                next_assigned_to = user_email
                final = True
            else:  # accept
                if is_grant:
                    if current_assigned_to == 'CTO_APPROVAL':
                        next_assigned_to = 'CISO_APPROVAL'
                        new_status = 'open'
                    elif current_assigned_to == 'CISO_APPROVAL':
                        next_assigned_to = 'Application Owner'
                        new_status = 'open'
                    elif current_assigned_to == 'Application Owner':
                        next_assigned_to = user_email
                        new_status = 'Closed'
                        final = True
                    else:
                        return JsonResponse({'success': False, 'error': 'Invalid stage for grant flow'}, status=400)
                elif is_revoke:
                    if current_assigned_to == 'CTO_APPROVAL':
                        next_assigned_to = 'Application Owner'
                        new_status = 'open'
                    elif current_assigned_to == 'Application Owner':
                        next_assigned_to = user_email
                        new_status = 'Closed'
                        final = True
                    else:
                        return JsonResponse({'success': False, 'error': 'Invalid stage for revoke flow'}, status=400)

            assigned_at = timezone.now()
