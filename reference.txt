@csrf_exempt
@login_required
@require_POST
def update_event_status(request):
    import json
    data = json.loads(request.body)
    event_id = data.get('event_id')
    action = data.get('action')

    if not event_id or action not in ['accept', 'reject']:
        return JsonResponse({'success': False, 'error': 'Invalid input'}, status=400)

    assigned_to = request.user.email
    assigned_at = timezone.now()
    eve_status = 'Accepted' if action == 'accept' else 'Rejected'

    try:
        with connection.cursor() as cursor:
            cursor.execute(
                """
                UPDATE event_status
                SET assigned_to = %s, assigned_at = %s, eve_status = %s
                WHERE event_id = %s
                """,
                [assigned_to, assigned_at, eve_status, event_id]
            )
        return JsonResponse({'success': True})
    except Exception as e:
        logger.error(f"Failed to update event status: {e}")
        return JsonResponse({'success': False, 'error': 'Database error'}, status=500)



    path('action/update-event-status/', views.update_event_status, name='update-event-status'),




from django.views.decorators.csrf import csrf_exempt
from django.db import connection




<script>
  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.btn-action').forEach(function (button) {
      button.addEventListener('click', function () {
        const row = this.closest('tr');
        const eventId = row.dataset.eventId;
        const action = this.dataset.action; // "accept" or "reject"

        fetch(`/action/update-event-status/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken') // Ensure CSRF token is included
          },
          body: JSON.stringify({ event_id: eventId, action: action })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              row.style.transition = 'opacity 0.5s';
              row.style.opacity = 0;
              setTimeout(() => row.remove(), 500);
            } else {
              alert('Failed to update status: ' + data.error);
            }
          })
          .catch(error => console.error('Error:', error));
      });
    });

    function getCookie(name) {
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }
  });
</script>
