{% extends 'base.html' %}
{% block title %}Legacy Dashboard{% endblock %}
{% block content %}
<div class="container py-5">
  <h2>Legacy Combined Dashboard</h2>
  <p>The dashboard has been split into role-specific views:</p>
  <ul>
    <li><a href="/dashboard/">Automatic role dispatch (reload)</a></li>
    <li>Admin template: <code>admin_dashboard.html</code></li>
    <li>RA template: <code>ra_dashboard.html</code></li>
    <li>Application Owner template: <code>application_owner_dashboard.html</code></li>
  </ul>
  <p>If you landed here unexpectedly, your account did not match any role conditions.</p>
  <a class="btn btn-primary" style="background:#ff512f;border-color:#ff512f" href="/my-workspace/">Back to Workspace</a>
</div>
{% endblock %}
    document.querySelectorAll('.access-page-link').forEach(function(link) {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const url = '/ajax/user-access-table/' + link.getAttribute('href');
        const container = document.getElementById('user-access-table-container');
        if (container) {
          container.innerHTML = '<div class="text-center py-4">Loading...</div>';
          fetch(url)
            .then(resp => resp.text())
            .then(html => {
              container.innerHTML = html;
              bindUserAccessPagination();
            });
        }
      });
    });
  }
  bindUserAccessPagination();

  // AJAX pagination for RA User Access
  function bindRaUserAccessPagination() {
    document.querySelectorAll('.ra-access-page-link').forEach(function(link) {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const url = '/ajax/ra-user-access-table/' + link.getAttribute('href');
        const container = document.getElementById('ra-user-access-table-container');
        if (container) {
          container.innerHTML = '<div class="text-center py-4">Loading...</div>';
          fetch(url)
            .then(resp => resp.text())
            .then(html => {
              container.innerHTML = html;
              bindRaUserAccessPagination();
            });
        }
      });
    });
  }
  bindRaUserAccessPagination();

  // Modal and revoke logic (unchanged)
  const revokeModal = document.getElementById('revokeModal');
  if (revokeModal) {
    revokeModal.addEventListener('show.bs.modal', async (ev) => {
      const btn = ev.relatedTarget;
      const emp = btn.getAttribute('data-emp');
      const email = btn.getAttribute('data-email');
      document.getElementById('rev-emp').value = emp;
      document.getElementById('rev-email').textContent = email;
      // fetch presence
      const res = await fetch(`/api/hrms/${emp}/presence/`);
      const data = await res.json();
      const p = data.presence || {};
  document.getElementById('chk-rpulse').checked = !!p.rpulse;
  document.getElementById('chk-dre').checked = !!p.dre;
  document.getElementById('chk-ingenious').checked = !!p.ingenious;
  document.getElementById('chk-exponentia').checked = !!p.exponentia;
  document.getElementById('chk-neo').checked = !!p.neo;
  document.getElementById('chk-dlp').checked = !!p.dlp;
    });

    document.getElementById('rev-submit').addEventListener('click', async () => {
      const form = document.getElementById('revokeForm');
      const fd = new FormData(form);
      // Normalize checkbox values to 'true'/'false'
      ['rpulse','dre','ingenious','exponentia','neo','dlp'].forEach(k => {
        fd.set(k, document.getElementById('chk-'+k).checked ? 'true' : 'false');
      });
      const res = await fetch('/action/revoke-access/', {
        method: 'POST',
        headers: { 'X-CSRFToken': getCookie('csrftoken') },
        body: fd,
      });
      if (res.ok) {
        bootstrap.Modal.getInstance(revokeModal).hide();
        alert('Submitted');
      } else {
        alert('Error submitting');
      }
    });
  }

  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }
});
</script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.btn-image');
    const tableBody = document.getElementById('application-access-table-body');

    // Default selection for RPulse
    const defaultButton = document.querySelector('.btn-image img[alt="RPulse"]').closest('.btn-image');
    defaultButton.classList.add('active');
    const defaultAppName = defaultButton.querySelector('img').alt.toLowerCase();

    // Fetch data for the default application
    fetch(`/get-application-data?app=${defaultAppName}`)
      .then(response => response.json())
      .then(data => {
        tableBody.innerHTML = '';
        const employees = data.data || [];
        employees.forEach(employee => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${employee.emp_code}</td>
            <td>${employee.first_name} ${employee.last_name}</td>
            <td>${employee.business_email}</td>
          `;
          tableBody.appendChild(row);
        });
      })
      .catch(error => console.error('Error fetching application data:', error));

    buttons.forEach(button => {
      button.addEventListener('click', function() {
        buttons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');

        const appName = this.querySelector('img').alt.toLowerCase();

        // Fetch data for the selected application
        fetch(`/get-application-data?app=${appName}`)
          .then(response => response.json())
          .then(data => {
            tableBody.innerHTML = '';
            const employees = data.data || [];
            employees.forEach(employee => {
              const row = document.createElement('tr');
              row.innerHTML = `
                <td>${employee.emp_code}</td>
                <td>${employee.first_name} ${employee.last_name}</td>
                <td>${employee.business_email}</td>
              `;
              tableBody.appendChild(row);
            });
          })
          .catch(error => console.error('Error fetching application data:', error));
      });
    });
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInputs = document.querySelectorAll('.modern-search-box input');

    searchInputs.forEach(input => {
      input.addEventListener('input', function() {
        const tableId = this.getAttribute('data-table-id');
        const filter = this.value.toLowerCase();
        const table = document.getElementById(tableId);
        const rows = table.querySelectorAll('tbody tr');

        rows.forEach(row => {
          const cells = row.querySelectorAll('td');
          const match = Array.from(cells).some(cell => cell.textContent.toLowerCase().includes(filter));
          row.style.display = match ? '' : 'none';
        });
      });
    });
  });
</script>

<style>
  .modern-search-box {
    position: relative;
    margin-bottom: 10px;
    width: 300px;
    float: right;
  }

  .modern-search-box input {
    width: 100%;
    padding: 8px 30px;
    border: 1px solid #ddd;
    border-radius: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    font-size: 14px;
    transition: all 0.3s ease;
  }

  .modern-search-box input:focus {
    border-color: #ff512f;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    outline: none;
  }

  .modern-search-box i {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
    font-size: 16px;
    color: #aaa;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.btn-action').forEach(function (button) {
      console.log('Binding to button:', button);
      button.addEventListener('click', function () {
        console.log('Button clicked:', this);
        const row = this.closest('.request-item'); // Updated to find the correct parent element
        if (!row) {
          console.error('Parent element with class .request-item not found');
          return;
        }
        const eventId = row.dataset.eventId;
        const action = this.dataset.action; // "accept" or "reject"

        console.log('Event ID:', eventId, 'Action:', action);

        fetch(`/action/update-event-status/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken') // Ensure CSRF token is included
          },
          body: JSON.stringify({ event_id: eventId, action: action })
        })
          .then(response => response.json())
          .then(data => {
            console.log('Response:', data);
            if (data.success) {
              row.style.transition = 'opacity 0.5s';
              row.style.opacity = 0;
              setTimeout(() => row.remove(), 500);
            } else {
              alert('Failed to update status: ' + data.error);
            }
          })
          .catch(error => console.error('Error:', error));
      });
    });

    function getCookie(name) {
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }
  });
</script>
{% endblock %}
