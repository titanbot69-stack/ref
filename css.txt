	<button id="btn-init-cert" data-last="{% if last_initiated_at %}{{ last_initiated_at }}{% endif %}" class="btn btn-primary" style="background:#ff512f;border-color:#ff512f">Initiate Certification</button>



<div class="modal fade" id="initCertConfirmModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-sm modal-recert">
		<div class="modal-content shadow-lg border-0">
			<div class="modal-header gradient-header py-2">
				<h6 class="modal-title d-flex align-items-center mb-0">
					<i class="fas fa-certificate me-2"></i>Initiate Certification
				</h6>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body py-3 small">
				<div class="info-box mb-3">
					<div class="d-flex align-items-start">
						<div class="icon-wrap me-2"><i class="fas fa-users-cog"></i></div>
						<div class="flex-grow-1 lh-sm">
							<strong>Certification Cycle</strong> notifies every RA to reconfirm access posture for their supervised users. This can be initiated only once every <strong>15 days</strong>.
						</div>
					</div>
				</div>
				<ul class="mb-3 ps-3 small">
					<li>Generates one audit event (visible in Event Logs).</li>
					<li>Queues notification payloads per RA (email placeholder in this build).</li>
					<li>Subsequent attempt inside cooldown will be blocked.</li>
				</ul>
				<div class="alert alert-info py-2 px-3 mb-2" id="last-init-info" style="display:none;"></div>
				<div class="form-check mb-2">
					<input class="form-check-input" type="checkbox" id="ack-init-cert" />
					<label class="form-check-label" for="ack-init-cert">I understand and want to proceed.</label>
				</div>
				<div class="text-danger small d-none" id="init-cert-error"></div>
			</div>
			<div class="modal-footer py-2 gap-2 flex-nowrap">
				<button class="btn btn-light btn-sm border" data-bs-dismiss="modal">Cancel</button>
				<button class="btn btn-primary btn-sm d-inline-flex align-items-center gap-2" id="confirm-init-cert" disabled>
					<span class="spinner-border spinner-border-sm d-none" id="init-cert-spinner"></span>
					<span class="btn-text">Start</span>
				</button>
			</div>
		</div>
	</div>
</div>






// Initiate Certification (AJAX + confirmation modal + cooldown)
document.addEventListener('DOMContentLoaded',function(){
	const triggerBtn=document.getElementById('btn-init-cert');
	const modalEl=document.getElementById('initCertConfirmModal');
	if(!triggerBtn||!modalEl) return;
	const ack=document.getElementById('ack-init-cert');
	const confirmBtn=document.getElementById('confirm-init-cert');
	const spinner=document.getElementById('init-cert-spinner');
	const errBox=document.getElementById('init-cert-error');
	const lastInfo=document.getElementById('last-init-info');
	const bsModal=new bootstrap.Modal(modalEl);
	triggerBtn.addEventListener('click',()=>{
		errBox.classList.add('d-none');errBox.textContent='';
		ack.checked=false;confirmBtn.disabled=true;spinner.classList.add('d-none');
		const last=triggerBtn.getAttribute('data-last');
		if(last){lastInfo.style.display='block';lastInfo.textContent='Last Initiated At: '+last;} else {lastInfo.style.display='none';}
		bsModal.show();
	});
	ack && ack.addEventListener('change',()=>{confirmBtn.disabled=!ack.checked;});
	confirmBtn.addEventListener('click',()=>{
		confirmBtn.disabled=true;spinner.classList.remove('d-none');
		fetch('/action/initiate-certification/',{method:'POST',headers:{'X-CSRFToken':getCookie('csrftoken'),'X-Requested-With':'XMLHttpRequest'}})
			.then(r=>r.json())
			.then(d=>{
				if(d.success){
					showToast('Certification initiation started');
					const nowStr=new Date().toISOString().slice(0,19).replace('T',' ');
					triggerBtn.setAttribute('data-last',nowStr);
					bsModal.hide();
				} else if(d.cooldown){
					errBox.textContent=d.error + (d.last_initiated_at? (' (Last: '+d.last_initiated_at+')'):'');
					errBox.classList.remove('d-none');
				} else {
					showToast(d.error||'Failed to initiate','danger');
				}
			})
			.catch(()=>showToast('Network error','danger'))
			.finally(()=>{spinner.classList.add('d-none');confirmBtn.disabled=false;});
	});
	function showToast(msg,type='success'){
		let holder=document.getElementById('toast-holder');
		if(!holder){holder=document.createElement('div');holder.id='toast-holder';holder.style.position='fixed';holder.style.top='70px';holder.style.right='20px';holder.style.zIndex='1080';document.body.appendChild(holder);} 
		const div=document.createElement('div');div.className='alert alert-'+(type==='danger'?'danger':type)+' py-2 px-3 mb-2 shadow-sm';div.textContent=msg;holder.appendChild(div);setTimeout(()=>div.remove(),3500);
	}
});







<style>
/* Theming borrowed from recertify modal */
.modal-recert .modal-content{border-radius:10px;overflow:hidden;}
.gradient-header{background:linear-gradient(90deg,#ff8c1a,#ff512f);color:#fff;}
.gradient-header .btn-close{filter:invert(1) brightness(200%);}
.info-box{background:#fff8f2;border:1px solid #ffd8c2;border-radius:8px;padding:.65rem .75rem;}
.info-box .icon-wrap{width:32px;height:32px;border-radius:6px;background:#ffebe0;display:flex;align-items:center;justify-content:center;color:#ff6b2e;font-size:.95rem;}
#initCertConfirmModal .form-check-input:focus{box-shadow:0 0 0 .2rem rgba(255,128,64,.25);}
</style>
